#!/usr/bin/env bash

# Interactively cherry-picks commits by a keyword
# https://github.com/gocom/git-draft
#
# Copyright (C) 2023 Jukka Svahn
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

app_name="${0##*/}"
app_version="@{{VERSION}}"

usage () {
  cat <<EOF
Interactively cherry-picks commits by searching their messages for a keyword.

This tool is intended for tasks where set of commits need to be taken
to a target branch in their original commit date order. This could, for
instance, be used to build release branches from a main branch.

Usage:
  $ $app_name [options] <source-branch> <keyword ...>

Options:
  -h, --help      Print this message
  -v, --version   Print version number
  -D, --dry-run   Dry-run without writing
  -S, --silent    Silent mode
  -V, --verbose   Verbose output
      --color     Enable colors
      --no-color  Disable colors
      --stdin     Branch name and keywords from standard input

  -r, --revert    Instead of cherry-picking, search and revert commits
                  from the currently active branch

      --all       Select all matching commits
      --new       Select all matching new commits

Examples:
  $ git checkout release/2022-01
  $ $app_name main JIRA-894 JIRA-101 JIRA-202 JIRA-1234

EOF
}

main () {
  local args OPTIND OPTARG OPTERR option \
    color dryrun silent verbose skip_existing stdin hashes selected sort \
    reset red green yellow blue magenta cyan action

  args=()
  sort=0

  for option in "$@"; do
    case "$option" in
      -*) break ;;
      *) args+=("$option"); shift ;;
    esac
  done

  action="cherry-pick"
  color="always"

  if [ "${TERM:-}" = "dumb" ] || [ "${NO_COLOR:-}" ]; then
    color=""
  fi

  while getopts ":hvrVDQS-:" option; do
    case "$option" in
      -)
        case "$OPTARG" in
          help) usage; exit 0 ;;
          version) echo "$app_version"; exit 0 ;;
          color) color="always" ;;
          dryrun|dry-run) dryrun=1 ;;
          no-color) color="" ;;
          verbose) verbose=1 ;;
          quiet|silent) silent=1 ;;
          new) selected="new" ;;
          all) selected="all" ;;
          stdin) stdin=1 ;;
          sort) sort=0 ;;
          no-sort) sort=0 ;;
          revert) action="revert" ;;
          *) fatal "Invalid option: --$OPTARG" ;;
        esac
        ;;
      h) usage; exit 0 ;;
      v) echo "$app_version"; exit 0 ;;
      D) dryrun=1 ;;
      Q|S) silent=1 ;;
      V) verbose=1 ;;
      r) action="revert" ;;
      \?) fatal "Invalid option: -$OPTARG" ;;
      :) fatal "Option -$OPTARG requires an argument." ;;
      *) fatal "Unexpected: -$OPTARG" ;;
    esac
  done

  if [ "$stdin" ]; then
    while read -r line; do
      # shellcheck disable=SC2206
      args+=($line)
    done < /dev/stdin
  fi

  shift "$((OPTIND - 1))"
  set -- "${args[@]}" "$@"

  if [ "$color" ]; then
    reset="$(tput sgr0)"
    red="$(tput setaf 1)"
    green="$(tput setaf 2)"
    yellow="$(tput setaf 3)"
    blue="$(tput setaf 4)"
    magenta="$(tput setaf 5)"
    cyan="$(tput setaf 6)"
  fi

  if [ "$dryrun" ]; then
    log "${blue}ℹ${reset} Running with ${yellow}--dry-run${reset}, nothing will be written."
  fi

  pick "$@"
}

msg () {
  local message

  for message in "$@"; do
    echo "$message"
  done
}

log () {
  if ! [ "$silent" ]; then
    msg "$@"
  fi
}

verbose () {
  if [ "$verbose" ]; then
    log "$@"
  fi
}

err () {
  log "$@" >&2
}

fatal () {
  err "$@"
  exit 1
}
sort_commits_by_date() {
  git log --pretty='%H %at' "$@" | sort -k2 -n | cut -d' ' -f1
}

pick() {
  local selection hash git_directory sort_commits

  git_directory=$(git rev-parse --git-dir) \
    || fatal "${red}✘${reset} Not inside a git directory."

  hashes "$@"

  if [ $sort -gt 0 ]; then
    commits "$(sort_commits_by_date "${hashes[@]}")"
  else
    commits "${hashes[@]}"
  fi

  if ! [ "$selected" ] && ! [ "$silent" ]; then
    if [ "$action" = "revert" ]; then
      read -r -p "Revert commit row (1-n, all, exit): " selected
    else
      read -r -p "Cherry-pick commit row (1-n, all, new, exit): " selected
    fi
  fi

  case "$selected" in
    "") fatal "${red}✘${reset} No selection given." ;;
    e*|E*) fatal "${cyan}·${reset} Goodbye." ;;
    *) selection "$selected" "${hashes[@]}" ;;
  esac

  for hash in "${selection[@]}"; do
    if [ "$action" = "revert" ]; then
      revert "$hash"
    else
      cherry-pick "$hash"
    fi
  done

  log "${green}✓${reset} All selected commits processed."
}

commits () {
  local hash index

  index=1

  for hash in "$@"; do
    commit "$hash" "$index" "${##}"
    ((index++))
  done
}

commit () {
  local index paddingLength padding width spacing pretty marker markerLength \
    existing

  if [ "$silent" ]; then
    return 0
  fi

  index="${2:-}"
  paddingLength="${3:-0}"
  existing="$(contains "$1")"

  if [ "$existing" ]; then
    marker="✿"
  else
    marker=" "
  fi

  padding="    "
  padding="${padding:1:$paddingLength}"
  spacing="${#padding}"
  markerLength="${#marker}"

  ((width=80-2-spacing-markerLength))

  pretty="$(printf '%s%s %s  %s  %s  %s' \
    "${padding:${#index}}%C(auto,green)$index%Creset" \
    "%C(auto,cyan)$marker%Creset" \
    "%<($width,trunc)%s%n$padding" \
    "%C(auto,yellow)%h%Creset" \
    "%C(auto,magenta)%ad%Creset" \
    "%<(40,trunc)%an")"

  git show \
    --quiet \
    --color="${color:-never}" \
    --date=format:'%Y-%m-%d %H:%M:%S' \
    --pretty="${pretty[*]}" \
    "$1" \
    || fatal "${red}✘${reset} Failed to get commit ${yellow}$1${reset}"

  if [ "$existing" ]; then
    verbose "${padding}  ${cyan}@${reset} ${yellow}$existing${reset}"
  fi
}

selection () {
  local min max row i hash

  selection=()

  row="$1"

  shift 1

  case "$row" in
    n*) skip_existing=1 ;;
    a*|"") ;;
    *-*)
      min="$(echo "$row" | awk -F '-' '{print $1}')"
      max="$(echo "$row" | awk -F '-' '{print $2}')"
      ;;
    *)
      min="$row"
      max="$row"
      ;;
  esac

  min="${min:-1}"
  max="${max:-$#}"

  if ! [[ "$min" =~ ^[0-9]+$ ]] || [ "$min" -lt 1 ]; then
    fatal "${red}✘${reset} Invalid minimum selection range '$min'"
  fi

  if ! [[ "$max" =~ ^[0-9]+$ ]] || [ "$max" -gt "$#" ]; then
    fatal "${red}✘${reset} Invalid maximum selection range '$max'"
  fi

  for ((i=min;i<=max;i++)); do
    hash="${*:$i:1}"

    if ! [ "$hash" ]; then
      fatal "${red}✘${reset} Invalid row number '$i'"
    fi

    selection+=("$hash")
  done

  return 0
}

revert () {
  local abort hash existing

  hash="${1:-}"

  log "${magenta}↯${reset} Reverting ${yellow}$hash${reset}"

  if [ "$verbose" ]; then
    commit "$hash"
  fi

  run revert "$hash" && return 0

  err "${red}✘${reset} Reverting ${yellow}$hash${reset} failed"

  read -r -p "Continue from the next commit (Yes/no)? " abort

  case "$abort" in
    Y*|y*)
      if [ -f "${git_directory}/REVERT_HEAD" ]; then
        run revert --abort \
          || fatal "${red}✘${reset} Aborting revert failed"
      else
        log "${magenta}↯${reset} No revert in progress, continuing without abort"
      fi
      ;;
    *)
      fatal "${red}✘${reset} Exiting and leaving revert in progress"
      ;;
  esac
}

cherry-pick () {
  local abort hash existing

  hash="${1:-}"

  if [ "$skip_existing" ]; then
    existing="$(contains "$hash")"

    if [ "$existing" ]; then
      log "${cyan}✿${reset} Skipping ${yellow}$hash${reset}"
      verbose "  Exists as ${yellow}$existing${reset}"
      return 0
    fi
  fi

  log "${magenta}↯${reset} Cherry-picking ${yellow}$hash${reset}"

  if [ "$verbose" ]; then
    commit "$hash"
  fi

  run cherry-pick -x --allow-empty "$hash" && return 0

  err "${red}✘${reset} Cherry-picking ${yellow}$hash${reset} failed"

  read -r -p "Continue from the next commit (Yes/no)? " abort

  case "$abort" in
    Y*|y*)
      if [ -f "${git_directory}/CHERRY_PICK_HEAD" ]; then
        run cherry-pick --abort \
          || fatal "${red}✘${reset} Aborting cherry-pick failed"
      else
        log "${magenta}↯${reset} No cherry-pick in progress, continuing without abort"
      fi
      ;;
    *)
      fatal "${red}✘${reset} Exiting and leaving cherry-pick in progress"
      ;;
  esac
}

run () {
  if [ "$dryrun" ]; then
    return 0
  fi

  if [ "$silent" ]; then
    git "$@" > /dev/null 2>&1
  elif [ "$verbose" ]; then
    git "$@"
  else
    git "$@" > /dev/null
  fi

  return "$?"
}

hashes () {
  local find option branch delimiter

  if [ "$#" -eq 0 ]; then
    fatal "${red}✘${reset} Branch is required."
  fi

  log "${cyan}↻${reset} Searching for matching commits, this may take a while…"

  if ! [ "$action" = "revert" ]; then
    branch="${1:-}"
    shift 1
  fi

  args=()
  hashes=()
  delimiter=$'\n'
  find=""

  for option in "$@"; do
    if [ "$option" ]; then
      verbose "${cyan}·${reset} Grepping commit log for ${yellow}$option${reset}"

      if [ "$find" ]; then
        find="${find}${delimiter}${option}"
      else
        find="${option}"
      fi
    fi
  done

  if ! [ "$action" = "revert" ]; then
    args+=("--reverse")
  fi

  if [ "$branch" ]; then
    args+=("$branch")
  fi

  while read -r line; do
    if [ "$line" ]; then
      hashes+=("${line%% *}")
    fi
  done < <(git --no-pager log --pretty=tformat:"%H %s" "${args[@]}" | grep -Fw "$find")

  if [ "${#hashes}" -eq 0 ]; then
    fatal "${cyan}·${reset} No commits found matching the given criteria."
  fi
}

contains () {
  local result find

  find="$(git --no-pager log -1 --pretty=tformat:"%s" "$1")"
  result="$(git --no-pager log --pretty=tformat:"%H" --grep="^$find$")"

  if ! [ "$result" ]; then
    return 1
  fi

  echo "$result"
}

main "$@"
